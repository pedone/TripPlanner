// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripPlanner.Models;

namespace TripPlanner.Migrations
{
    [DbContext(typeof(TripPlannerContext))]
    [Migration("20181214185544_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TripPlanner.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CountryCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TripPlanner.Models.FeatureCategory", b =>
                {
                    b.Property<string>("Code");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Code");

                    b.ToTable("FeatureCategories");
                });

            modelBuilder.Entity("TripPlanner.Models.FeatureCode", b =>
                {
                    b.Property<string>("Code");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("FeatureCategoryCode")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Code");

                    b.HasIndex("FeatureCategoryCode");

                    b.ToTable("FeatureCodes");
                });

            modelBuilder.Entity("TripPlanner.Models.GeoData", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AlternateNames");

                    b.Property<string>("CountryCode")
                        .IsRequired();

                    b.Property<string>("FeatureCodeCode")
                        .IsRequired();

                    b.Property<float>("Lattitude");

                    b.Property<float>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TimeZoneId");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("FeatureCodeCode");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("GeoData");
                });

            modelBuilder.Entity("TripPlanner.Models.TimeZone", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("TripPlanner.Models.FeatureCode", b =>
                {
                    b.HasOne("TripPlanner.Models.FeatureCategory", "FeatureCategory")
                        .WithMany("FeatureCodes")
                        .HasForeignKey("FeatureCategoryCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TripPlanner.Models.GeoData", b =>
                {
                    b.HasOne("TripPlanner.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TripPlanner.Models.FeatureCode", "FeatureCode")
                        .WithMany("GeoData")
                        .HasForeignKey("FeatureCodeCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TripPlanner.Models.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
